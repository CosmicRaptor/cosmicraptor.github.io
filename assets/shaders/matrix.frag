{
  "sksl": {
    "entrypoint": "matrix_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec3 iResolution;\nuniform float iTime;\nuniform vec4 iMouse;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_rotate(vec2 v, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(vec2(c, -s), vec2(s, c)) * v;\n}\n\nfloat FLT_flutter_local_smoothstep1(float x)\n{\n    return smoothstep(0.0, 1.0, x);\n}\n\nvec3 FLT_flutter_local_rotateX(vec3 v, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, c, -s), vec3(0.0, s, c)) * v;\n}\n\nvec3 FLT_flutter_local_rotateY(vec3 v, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat3(vec3(c, 0.0, -s), vec3(0.0, 1.0, 0.0), vec3(s, 0.0, c)) * v;\n}\n\nvec3 FLT_flutter_local_rotateZ(vec3 v, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat3(vec3(c, -s, 0.0), vec3(s, c, 0.0), vec3(0.0, 0.0, 1.0)) * v;\n}\n\nfloat FLT_flutter_local_hash(float v)\n{\n    return fract(sin(v) * 43758.546875);\n}\n\nfloat FLT_flutter_local_hash(vec2 v)\n{\n    float param = dot(v, vec2(5.3983001708984375, 5.442699909210205078125));\n    return FLT_flutter_local_hash(param);\n}\n\nvec4 FLT_flutter_local_hash4(vec3 v)\n{\n    vec4 p;\n    p.x = dot(v, vec3(127.09999847412109375, 269.5, 113.5));\n    p.y = dot(v, vec3(311.70001220703125, 183.3000030517578125, 271.899993896484375));\n    p.z = dot(v, vec3(74.6999969482421875, 246.100006103515625, 124.59999847412109375));\n    p.w = dot(v, vec3(271.899993896484375, 269.5, 311.70001220703125));\n    return fract(sin(p) * 43758.546875);\n}\n\nvec2 FLT_flutter_local_hash2(vec2 v)\n{\n    vec2 p;\n    p.x = dot(v, vec2(127.09999847412109375, 269.5));\n    p.y = dot(v, vec2(311.70001220703125, 183.3000030517578125));\n    return fract(sin(p) * 43758.546875);\n}\n\nvec4 FLT_flutter_local_hash4(vec2 v)\n{\n    vec4 p;\n    p.x = dot(v, vec2(127.09999847412109375, 311.70001220703125));\n    p.y = dot(v, vec2(269.5, 183.3000030517578125));\n    p.z = dot(v, vec2(113.5, 271.899993896484375));\n    p.w = dot(v, vec2(246.100006103515625, 124.59999847412109375));\n    return fract(sin(p) * 43758.546875);\n}\n\nfloat FLT_flutter_local_rune_line(inout vec2 p, vec2 a, inout vec2 b)\n{\n    p -= a;\n    b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0.0, 1.0);\n    return length(p - (b * h));\n}\n\nfloat FLT_flutter_local_rune(vec2 U, inout vec2 seed, float highlight)\n{\n    float d = 100000.0;\n    for (int i = 0; i < 4; i++)\n    {\n        vec2 param = seed;\n        vec4 pos = FLT_flutter_local_hash4(param);\n        seed += vec2(1.0);\n        if (i == 0)\n        {\n            pos.y = 0.0;\n        }\n        if (i == 1)\n        {\n            pos.x = 0.999000012874603271484375;\n        }\n        if (i == 2)\n        {\n            pos.x = 0.0;\n        }\n        if (i == 3)\n        {\n            pos.y = 0.999000012874603271484375;\n        }\n        vec4 snaps = vec4(2.0, 3.0, 2.0, 3.0);\n        pos = (floor(pos * snaps) + vec4(0.5)) / snaps;\n        if (any(notEqual(pos.xy, pos.zw)))\n        {\n            vec2 param_1 = U;\n            vec2 param_2 = pos.xy;\n            vec2 param_3 = pos.zw + vec2(0.001000000047497451305389404296875);\n            float _278 = FLT_flutter_local_rune_line(param_1, param_2, param_3);\n            d = min(d, _278);\n        }\n    }\n    return smoothstep(0.100000001490116119384765625, 0.0, d) + (highlight * smoothstep(0.4000000059604644775390625, 0.0, d));\n}\n\nfloat FLT_flutter_local_random_char(vec2 outer, vec2 inner, float highlight)\n{\n    vec2 seed = vec2(dot(outer, vec2(269.5, 183.3000030517578125)), dot(outer, vec2(113.5, 271.899993896484375)));\n    vec2 param = inner;\n    vec2 param_1 = seed;\n    float param_2 = highlight;\n    float _305 = FLT_flutter_local_rune(param, param_1, param_2);\n    return _305;\n}\n\nvec3 FLT_flutter_local_rain(vec3 ro3, vec3 rd3, float time)\n{\n    vec4 result = vec4(0.0);\n    vec2 ro2 = ro3.xy;\n    vec2 rd2 = normalize(rd3.xy);\n    bool prefer_dx = abs(rd2.x) > abs(rd2.y);\n    float _328;\n    if (prefer_dx)\n    {\n        _328 = rd3.x / rd2.x;\n    }\n    else\n    {\n        _328 = rd3.y / rd2.y;\n    }\n    float t3_to_t2 = _328;\n    ivec3 cell_side = ivec3(step(vec3(0.0), rd3));\n    ivec3 cell_shift = ivec3(sign(rd3));\n    float t2 = 0.0;\n    ivec2 next_cell = ivec2(floor(ro2 / vec2(1.2000000476837158203125)));\n    float _661;\n    for (int i = 0; i < 20; i++)\n    {\n        ivec2 cell = next_cell;\n        float t2s = t2;\n        vec2 side = (vec2(next_cell) + vec2(cell_side.xy)) * 1.2000000476837158203125;\n        vec2 t2_side = (side - ro2) / rd2;\n        if (t2_side.x < t2_side.y)\n        {\n            t2 = t2_side.x;\n            next_cell.x += cell_shift.x;\n        }\n        else\n        {\n            t2 = t2_side.y;\n            next_cell.y += cell_shift.y;\n        }\n        vec2 cell_in_block = fract(vec2(cell) / vec2(10.0));\n        float gap = 0.20000000298023223876953125;\n        bool _427 = cell_in_block.x < gap;\n        bool _435;\n        if (!_427)\n        {\n            _435 = cell_in_block.y < gap;\n        }\n        else\n        {\n            _435 = _427;\n        }\n        bool _452;\n        if (!_435)\n        {\n            bool _443 = cell_in_block.x < (gap + 0.100000001490116119384765625);\n            bool _451;\n            if (_443)\n            {\n                _451 = cell_in_block.y < (gap + 0.100000001490116119384765625);\n            }\n            else\n            {\n                _451 = _443;\n            }\n            _452 = _451;\n        }\n        else\n        {\n            _452 = _435;\n        }\n        if (_452)\n        {\n            continue;\n        }\n        float t3s = t2s / t3_to_t2;\n        float pos_z = ro3.z + (rd3.z * t3s);\n        vec2 param = vec2(cell);\n        float xycell_hash = FLT_flutter_local_hash(param);\n        float z_shift = (xycell_hash * 11.0) - (time * (((0.5 + (xycell_hash * 1.0)) + ((xycell_hash * xycell_hash) * 1.0)) + (pow(xycell_hash, 16.0) * 3.0)));\n        float char_z_shift = floor(z_shift / 0.1500000059604644775390625);\n        z_shift = char_z_shift * 0.1500000059604644775390625;\n        int zcell = int(floor((pos_z - z_shift) / 6.0));\n        for (int j = 0; j < 2; j++)\n        {\n            vec3 param_1 = vec3(ivec3(cell, zcell));\n            vec4 cell_hash = FLT_flutter_local_hash4(param_1);\n            vec4 cell_hash2 = fract(cell_hash * vec4(127.09999847412109375, 311.70001220703125, 271.899993896484375, 124.59999847412109375));\n            float chars_count = (cell_hash.w * 33.0) + 7.0;\n            float target_length = chars_count * 0.1500000059604644775390625;\n            float target_rad = 0.0500000007450580596923828125;\n            float target_z = ((float(zcell) * 6.0) + z_shift) + (cell_hash.z * (6.0 - target_length));\n            vec2 target = ((vec2(cell) * 1.2000000476837158203125) + vec2(target_rad)) + (cell_hash.xy * (1.2000000476837158203125 - (target_rad * 2.0)));\n            vec2 s = target - ro2;\n            float tmin = dot(s, rd2);\n            if ((tmin >= t2s) && (tmin <= t2))\n            {\n                float u = (s.x * rd2.y) - (s.y * rd2.x);\n                if (abs(u) < target_rad)\n                {\n                    u = ((u / target_rad) + 1.0) * 0.5;\n                    float z = ro3.z + ((rd3.z * tmin) / t3_to_t2);\n                    float v = (z - target_z) / target_length;\n                    if ((v >= 0.0) && (v < 1.0))\n                    {\n                        float c = floor(v * chars_count);\n                        float q = fract(v * chars_count);\n                        vec2 param_2 = vec2(c + char_z_shift, cell_hash2.x);\n                        vec2 char_hash = FLT_flutter_local_hash2(param_2);\n                        if ((char_hash.x >= 0.100000001490116119384765625) || (c == 0.0))\n                        {\n                            if (c == 0.0)\n                            {\n                                _661 = time * 5.0;\n                            }\n                            else\n                            {\n                                _661 = time * ((1.0 * cell_hash2.z) + (((cell_hash2.w * cell_hash2.w) * 4.0) * pow(char_hash.y, 4.0)));\n                            }\n                            float time_factor = floor(_661);\n                            vec2 param_3 = vec2(char_hash.x, time_factor);\n                            vec2 param_4 = vec2(u, q);\n                            float param_5 = max(1.0, 3.0 - (c / 2.0)) * 0.20000000298023223876953125;\n                            float a = FLT_flutter_local_random_char(param_3, param_4, param_5);\n                            a *= clamp(((chars_count - 0.5) - c) / 2.0, 0.0, 1.0);\n                            if (a > 0.0)\n                            {\n                                float attenuation = 1.0 + pow((0.0599999986588954925537109375 * tmin) / t3_to_t2, 2.0);\n                                bvec3 _734 = bvec3(c == 0.0);\n                                vec3 col = vec3(_734.x ? vec3(0.670000016689300537109375, 1.0, 0.819999992847442626953125).x : vec3(0.25, 0.800000011920928955078125, 0.4000000059604644775390625).x, _734.y ? vec3(0.670000016689300537109375, 1.0, 0.819999992847442626953125).y : vec3(0.25, 0.800000011920928955078125, 0.4000000059604644775390625).y, _734.z ? vec3(0.670000016689300537109375, 1.0, 0.819999992847442626953125).z : vec3(0.25, 0.800000011920928955078125, 0.4000000059604644775390625).z) / vec3(attenuation);\n                                float a1 = result.w;\n                                result.w = a1 + ((1.0 - a1) * a);\n                                vec4 _749 = result;\n                                float _761 = result.w;\n                                vec3 _763 = ((_749.xyz * a1) + ((col * (1.0 - a1)) * a)) / vec3(_761);\n                                result.x = _763.x;\n                                result.y = _763.y;\n                                result.z = _763.z;\n                                if (result.w > 0.980000019073486328125)\n                                {\n                                    return result.xyz;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            zcell += cell_shift.z;\n        }\n    }\n    return result.xyz * result.w;\n}\n\nvec4 FLT_flutter_local_mainImage(vec2 fragCoord)\n{\n    if (false)\n    {\n        return vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    vec2 uv = ((fragCoord * 2.0) - iResolution.xy) / vec2(iResolution.y);\n    float time = iTime * 1.0;\n    float level1_size = 36.0;\n    float level2_size = 4.0 * level1_size;\n    float gap_size = 2.400000095367431640625;\n    vec3 ro = vec3(gap_size * 0.5, gap_size * 0.5, 0.0);\n    vec3 rd = vec3(uv.x, 2.0, uv.y);\n    float tq = fract((time / (level2_size * 4.0)) * 1.2000000476837158203125);\n    float t8 = fract(tq * 4.0);\n    float t1 = fract(t8 * 8.0);\n    vec2 prev;\n    vec2 dir;\n    if (tq < 0.25)\n    {\n        prev = vec2(0.0);\n        dir = vec2(0.0, 1.0);\n    }\n    else\n    {\n        if (tq < 0.5)\n        {\n            prev = vec2(0.0, 1.0);\n            dir = vec2(1.0, 0.0);\n        }\n        else\n        {\n            if (tq < 0.75)\n            {\n                prev = vec2(1.0);\n                dir = vec2(0.0, -1.0);\n            }\n            else\n            {\n                prev = vec2(1.0, 0.0);\n                dir = vec2(-1.0, 0.0);\n            }\n        }\n    }\n    float angle = floor(tq * 4.0);\n    prev *= 4.0;\n    float turn_sign = 0.0;\n    vec2 param = dir;\n    float param_1 = -1.57079637050628662109375;\n    vec2 dirL = FLT_flutter_local_rotate(param, param_1);\n    vec2 dirR = -dirL;\n    float up_down = 0.0;\n    float rotate_on_turns = 1.0;\n    float roll_on_turns = 1.0;\n    float add_angel = 0.0;\n    vec2 turn;\n    if (t8 < 0.125)\n    {\n        turn = dirL;\n        turn_sign = -1.0;\n        angle -= (0.4000000059604644775390625 * ((max(0.0, t1 - 0.618621349334716796875) / 0.19068934023380279541015625) - ((max(0.0, t1 - 0.8093106746673583984375) / 0.19068934023380279541015625) * 2.5)));\n        roll_on_turns = 0.0;\n    }\n    else\n    {\n        if (t8 < 0.25)\n        {\n            prev += dir;\n            turn = dir;\n            dir = dirL;\n            angle -= 1.0;\n            turn_sign = 1.0;\n            add_angel += (0.20000000298023223876953125 + (1.2999999523162841796875 * t1));\n            rotate_on_turns = 0.0;\n            roll_on_turns = 0.0;\n        }\n        else\n        {\n            if (t8 < 0.375)\n            {\n                prev += (dir + dirL);\n                turn = dirR;\n                turn_sign = 1.0;\n                add_angel += (0.5 * sqrt(1.0 - t1));\n            }\n            else\n            {\n                if (t8 < 0.5)\n                {\n                    prev += ((dir + dir) + dirL);\n                    turn = dirR;\n                    dir = dirR;\n                    angle += 1.0;\n                    turn_sign = 0.0;\n                    up_down = sin(t1 * 3.1415927410125732421875) * 0.37000000476837158203125;\n                }\n                else\n                {\n                    if (t8 < 0.625)\n                    {\n                        prev += (dir + dir);\n                        turn = dir;\n                        dir = dirR;\n                        angle += 1.0;\n                        turn_sign = -1.0;\n                        up_down = sin((-min(1.0, t1 / 0.8093106746673583984375)) * 3.1415927410125732421875) * 0.37000000476837158203125;\n                    }\n                    else\n                    {\n                        if (t8 < 0.75)\n                        {\n                            prev += ((dir + dir) + dirR);\n                            turn = dirL;\n                            turn_sign = -1.0;\n                            float param_2 = t1;\n                            add_angel -= (1.25 * FLT_flutter_local_smoothstep1(param_2));\n                            rotate_on_turns = 0.0;\n                            roll_on_turns = 0.0;\n                        }\n                        else\n                        {\n                            if (t8 < 0.875)\n                            {\n                                prev += (((dir + dir) + dir) + dirR);\n                                turn = dir;\n                                dir = dirL;\n                                angle -= 1.0;\n                                turn_sign = 1.0;\n                                float param_3 = t1;\n                                add_angel -= (0.25 - (FLT_flutter_local_smoothstep1(param_3) * 1.5));\n                                rotate_on_turns = 0.0;\n                                roll_on_turns = 0.0;\n                            }\n                            else\n                            {\n                                prev += ((dir + dir) + dir);\n                                turn = dirR;\n                                turn_sign = 1.0;\n                                float param_4 = 1.0 - min(1.0, t1 / 0.8093106746673583984375);\n                                angle += (0.25 * ((1.5 * min(1.0, (1.0 - t1) / 0.19068934023380279541015625)) - (0.5 * FLT_flutter_local_smoothstep1(param_4))));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    bool _1157 = iMouse.x > 10.0;\n    bool _1164;\n    if (!_1157)\n    {\n        _1164 = iMouse.y > 10.0;\n    }\n    else\n    {\n        _1164 = _1157;\n    }\n    if (_1164)\n    {\n        vec2 mouse = ((iMouse.xy / iResolution.xy) * 2.0) - vec2(1.0);\n        up_down = (-0.699999988079071044921875) * mouse.y;\n        angle += mouse.x;\n        rotate_on_turns = 1.0;\n        roll_on_turns = 0.0;\n    }\n    else\n    {\n        angle += add_angel;\n    }\n    vec3 param_5 = rd;\n    float param_6 = up_down;\n    rd = FLT_flutter_local_rotateX(param_5, param_6);\n    vec2 p;\n    if (turn_sign == 0.0)\n    {\n        p = prev + (dir * (0.083333335816860198974609375 + (1.0 * t1)));\n    }\n    else\n    {\n        if (t1 > 0.8093106746673583984375)\n        {\n            float tr = (t1 - 0.8093106746673583984375) / 0.19068934023380279541015625;\n            vec2 c = (prev + (dir * 0.916666686534881591796875)) + (turn * 0.083333335816860198974609375);\n            vec2 param_7 = dir;\n            float param_8 = (((tr - 1.0) * turn_sign) * 3.1415927410125732421875) * 0.5;\n            p = c + (FLT_flutter_local_rotate(param_7, param_8) * 0.083333335816860198974609375);\n            angle += ((tr * turn_sign) * rotate_on_turns);\n            vec3 param_9 = rd;\n            float param_10 = (sin((tr * turn_sign) * 3.1415927410125732421875) * 0.20000000298023223876953125) * roll_on_turns;\n            rd = FLT_flutter_local_rotateY(param_9, param_10);\n        }\n        else\n        {\n            t1 /= 0.8093106746673583984375;\n            p = prev + (dir * (0.083333335816860198974609375 + (0.833333313465118408203125 * t1)));\n        }\n    }\n    vec3 param_11 = rd;\n    float param_12 = (angle * 3.1415927410125732421875) * 0.5;\n    rd = FLT_flutter_local_rotateZ(param_11, param_12);\n    vec3 _1277 = ro;\n    vec2 _1279 = _1277.xy + (p * level1_size);\n    ro.x = _1279.x;\n    ro.y = _1279.y;\n    ro += (rd * 0.20000000298023223876953125);\n    rd = normalize(rd);\n    vec3 param_13 = ro;\n    vec3 param_14 = rd;\n    float param_15 = time;\n    vec3 col = FLT_flutter_local_rain(param_13, param_14, param_15);\n    return vec4(col, 1.0);\n}\n\nvoid FLT_main()\n{\n    vec2 param_16 = flutter_FragCoord.xy;\n    fragColor = FLT_flutter_local_mainImage(param_16);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "iResolution",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "iTime",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "iMouse",
        "rows": 4,
        "type": 10
      }
    ]
  }
}